% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ancestorConceptProcessor.R
\name{ancestorConceptProcessor}
\alias{ancestorConceptProcessor}
\title{Create an ancestry concept processor}
\usage{
ancestorConceptProcessor(concept_ancestor = "concept_ancestor",
  concept_tbl = NULL, concept_list = NULL, handle_remaining = "drop",
  con = NULL, record_table_column = "concept_id",
  ancestor_column = "ancestor_concept_id",
  descendant_column = "descendant_concept_id",
  out_column = "concept_id", copy = FALSE)
}
\arguments{
\item{concept_ancestor}{The table defining ancestry relations}

\item{concept_tbl}{A one-column table with the ancestor concepts to map (use either this or concept_list)}

\item{concept_list}{An array or list with the ancestor concepts to map (use either this or concept_tbl)}

\item{handle_remaining}{How to handle concepts not mapped to ancestors. "drop" (the default) removes the records,
"passthrough" passes the values through (only use if ancestor and descendant concepts are of the same type).}

\item{con}{The connection to use when specifying tables by their names in a database as strings}

\item{record_table_column}{The column in the record table on which to map ancestors}

\item{ancestor_column}{The ancestor column in `concept_ancestor`}

\item{descendant_column}{The descendant column in `concept_ancestor`}

\item{out_column}{The name to give the resulting column}

\item{copy}{Passthrough parameter to [dplyr::left_join], needed when tables have different sources}
}
\value{
A function that operates on a table and adds `out_column` accordingly
}
\description{
Use an ancestry table to add a column of ancestor concepts to a record table
}
\author{
Yuriy Sverchkov
}
